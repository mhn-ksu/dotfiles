"* .vimrc
" Author: Mark Nichols <mark@zanshin.net>
" Source: http://github.com/zanshin/dotfiles/vim/vimrc
"
" Preface {{{
" Forget compatibility with vi. Who cares.
set nocompatible

" }}}
" Bundles {{{
" The presence of the .vimrc.bundles file means we're on a machine I 
" have more control over rather than less. So we'll use that to setup
" some spelling settings. Crude.
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
  set spellfile=~/Dropbox/vim/.vim-spell-en.utf-8.add
  set complete+=kspell
else
  set background=dark
  silent! colorscheme molokai 
  set spellfile=~$HOME/.vim-spell-en.utf-8.add
  set complete+=kspell
endif

if has('syntax') && !exists('g:syntax_on')
  syntax on
endif

" }}}
" Basic options {{{

"  change map <leader> from \ to ` ` (space)
:let mapleader = " "

" time out mappings after 1 second (1000) and key codes after 1/2 second (500)
set timeout timeoutlen=1000 ttimeoutlen=500

" Trying to break a very old habit...
" ex mode commands made easy
nnoremap ; :
nnoremap ;; ;
nnoremap Q <nop>

set laststatus=2                  " always show the status line
set cmdheight=2                   " and use a two-line tall status line
set showcmd                       " show the command
set noshowmode                    " don't show the mode, vim-airline will do that for us
set autoindent                    " turns it on
set smartindent                   " does the right thing (mostly) in programs
set linespace=3                   " prefer a slight higher line height
set linebreak                     " wrap intelligently, won't insert hard line breaks
set wrap                          " use line wrapping
set textwidth=79                  " at column 79
set ruler                         " display current cursor position
set list                          " show invisible characters
set listchars=tab:▸\ ,eol:¬,trail:⋅,nbsp:␣,extends:❯,precedes:❮
set showmatch                     " show matching brackets [{()}]
if exists("&relativenumber")
  set relativenumber              " use relative line numbers
endif
set number                        " except for the current line - absolute number there
set backspace=indent,eol,start    " make backspace behave in a sane manner
set mousehide                     " hide mouse when typing
set foldenable                    " enable code folding
set history=1000
set ffs=unix,mac,dos              " default file types
set autoread                      " automatically update file when editted outside of vim
if exists("&cryptmethod")
  set cryptmethod=blowfish        " Strong encryption is good
endif
set cursorline                    " highlight the line where the cursor is

" Relative Number and Number toggle
nnoremap <F10> :set relativenumber! number! number?<CR>

" Folding settings
set foldcolumn=3                  " room for fold markers
set foldmethod=marker             " use the standard 3 curly braces as markers

" Encoding anyone?
set termencoding=utf-8            " we like utf-8
set encoding=utf-8

" Change options: set $ at end of change range
" https://www.reddit.com/r/vim/comments/3b7324/insert_dollar_sign_at_end_of_change_command/
set cpoptions+=$

" Setup automatic text formatting/wrapping (previously: grn1 )
set formatoptions=
set formatoptions-=t              " don't autowrap text
set formatoptions+=c              " do autowrap comments
set formatoptions+=r              " automatically continue comments
set formatoptions+=o              " automatically continue comments when hitting 'o' or 'O'
set formatoptions+=q              " allow formating of comments with 'gq'
set formatoptions+=n              " recognize numbered lists
set formatoptions+=l              " don't break long lines that were already there

" Set match pairs beyond default {...}. (...), and [...]
set matchpairs+=<:>
" }}}
" Navaigation and movement {{{

" disable arrow keys and make semi-snarky comment. Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" use <C>hjkl to switch between splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Move line(s) up or down via C-j and C-k respectively 
" Normal mode
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==

" Insert mode
inoremap <C-j> <ESC>:m .+1<CR>==gi
inoremap <C-k> <ESC>:m .-2<CR>==gi

" Visual mode
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" }}}
" Buffers and Tabs {{{
nnoremap <leader>be :enew<cr>           " create new empty buffer
nnoremap <leader>bn :bnext<cr>          " move to next buffer
nnoremap <leader>bp :bprevious<cr>      " move to previous buffer
nnoremap <leader>bq :bp <BAR> bd #<cr>  " move to previous and close buffer

" nnoremap <M-t> :tabnew<CR>              " new tab <C-t>
" nnoremap <M-p> :tabprevious<CR>         " previous tab <C-p>
" nnoremap <M-n> :tabnext<CR>             " next tab <C-n>
" inoremap <M-t> :<Esc>tabnew<CR>         " insert mode, new tab <C-t>
" inoremap <M-p> :<Esc>:tabprevious<CR>i  " insert mode, previous tab <C-p>
" inoremap <M-n> :<Esc>:tabnext<CR>i      " insert mode, next tab <C-n>

" }}}
" File focus {{{

" What to do with files and focus
set autowrite           " write out old file when switching between files
set autoread            " reload files changed on disk, i.e. via `git checkout`
au FocusLost * :wa      " save file when Vim loses focus
set hidden              " switch beteen buffers without saving

" }}}
" Backups {{{

set backup                       " emable backups
set noswapfile                    " It's the 21st century already

if has('persistent_undo')
  set undodir=~/.vim/tmp/undo//     " undo files
  if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
  endif
endif

set backupdir=~/.vim/tmp/backup// " backups
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif

set directory=~/.vim/tmp/swap     " swap files
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif

" }}}
" Tabstops {{{
set tabstop=2           " 2 spaces for a tab - used when vim opens a file having <tab>s in it
set shiftwidth=2        " 2 spaces for autoindenting
set softtabstop=2       " 2 spaces inserted for <tab> when editing a file, also # removed by backspace
set expandtab           " expand tabs to spaces (overloadable by file type)

" }}}
" Scrolling {{{
set scrolloff=5         " show context above/below cursor line
set sidescrolloff=10    " number of cols from horizontal edge to  start scrolling
set sidescroll=1        " number of cols to scroll at a time

" }}}
" Help {{{
" only apply to .txt files
augroup HelpInTabs
  autocmd!
  autocmd BufEnter *.txt call HelpInNewTab()
augroup END

" only apply to help files...
function! HelpInNewTab ()
  if &buftype == 'help'
    " convert help window to a tab
    execute "normal \<C-W>T"
  endif
endfunction

" }}}
" Miscellaneous {{{
" Sudo to write
cnoremap w!! w !sudo tee % >/dev/null

" toggle listchars on or off
noremap <Leader>i :set list!<CR>

" fix Vim's regex handling
nnoremap / /\v
vnoremap / /\v

" Paste mode to prevent autoindentation of pasted lines
set pastetoggle=<F2>

" Better pasting from clipboard
" http://tilvim.com/2014/03/18/a-better-paste.html
noremap <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

set clipboard=unnamed   " yank and paste with the system clipboard

" show cursorline only in active window
if has("autocmd")
  autocmd WinLeave * set nocursorline
  autocmd WinEnter * set cursorline
endif

" Map escape to jj -- much faster to reach and type
inoremap jj <esc>

" Highlight words to avoid in tech writing
" =======================================
"
"   obviously, basically, simply, of course, clearly,
"   just, everyone knows, However, So, easy
"
"   http://css-tricks.com/words-avoid-educational-writing/
"   https://github.com/pengwynn/dotfiles/commit/12159ea233180344be4e25d57056ccd37061a153

" highlight TechWordsToAvoid ctermbg=red ctermfg=white
highlight TechWordsToAvoid ctermfg=red
match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however\|so,\|easy/
autocmd BufWinEnter * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd InsertEnter * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd InsertLeave * match TechWordsToAvoid /\cobviously\|basically\|simply\|of\scourse\|clearly\|just\|everyone\sknows\|however,\|so,\|easy/
autocmd BufWinLeave * call clearmatches()

" Preview Markdown files using MacDown (OS X only)
nnoremap <leader>pre :w<cr>:silent! !open -a MacDown % > /dev/null &<cr>:redraw!<cr>

" }}}
" Searching {{{

set gdefault            " apply substitutions globally by default. add `g` for old behavior
set incsearch           " use incremental search
set hlsearch            " highlight search results
set ignorecase          " ignore case when searching
set smartcase           " ignore case if search string is all lower case, case-sensitve otherwise
" remove search highlighting with <F3>
nnoremap <silent> <leader>/ :nohlsearch<CR>

" }}}
" Trailing Whitespace {{{
" www.bestofvim.com/tip/trailing-whitespace/
function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction

nnoremap <silent> <leader>rts :call TrimWhiteSpace()<CR>

" autocmd FileWritePre   * :call TrimWhiteSpace()
" autocmc FileAppendPre  * :call TrimWhiteSpace()
" autocmd FilterWritePre * :call TrimWhiteSpace()
" autocmd BufWritePre    * :call TrimWhiteSpace()

" }}}
" Preserve function {{{
" saves search history and cursor position
" call with some command, like removing all whitespace
function! Preserve(command)
  " preparation: save last search, and cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  " do the business
  execute a:command
  " clean up: restore previous search history and cursor position
  let @/=_s
  call cursor(l,c)
endfunction

" strip whitespace from all lines in file
nnoremap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" reindent entire file
nnoremap _= :call Preserve("normal gg=G")<CR>

" }}}
" Splits {{{

nnoremap <leader>v <C-w>v<C-w>l   " open a vertical split and switch to it (,v)
nnoremap <leader>h <C-w>s<C-w>j   " open a horizontal split and switch to it (,h)

" }}}
" Vimrc shortcuts {{{

" open vimrc in new tab for editing
nnoremap <leader>ev :tabedit $MYVIMRC<cr>

" automatically source .vimrc when it is saved (from vimcasts.org #24)
if has("autocmd")
  autocmd! bufwritepost .vimrc source $MYVIMRC
endif

" reload .vimrc
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" }}}
" Command line completion {{{

" search down into subfolders
" provides tab-completion for all file-related tasks
set path+=**

set wildmenu                 " navigate <left> & <right> through completion lists
"set wildmode=full             " complete first full match, next match (default) 

set wildignore+=.git                           " ignore Git 
set wildignore+=*.jpg,*.png,*.gif,*.jpeg,*.bmp " ignore image files
set wildignore+=*.sw?                          " swap files
set wildignore+=*.DS_Store                     " OS X clutter

" }}}
" Filetype settings {{{

" control whitespace preferences based on filetype
if has("autocmd")
  " enable file type detection
  filetype on

  " prevent Vim from auto-inserting comment on subsequent lines
  " http://tilvim.com/2013/12/30/remove-comment-prefix-2.html
  autocmd FileType * setlocal formatoptions-=r formatoptions-=o

  " syntax of these languages is fussy over tabs Vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

  " setup for mail
  autocmd FileType mail setlocal formatoptions+=aw
  autocmd FileType mail setlocal spell spelllang=en_us

  " treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss,*.atom setfiletype xml

  " spell check Git commit messages
  autocmd BufRead COMMIT_EDITMSG setlocal spell spelllang=en_us

  " start commit message in insert mode
  autocmd BufNewFile,BufRead COMMIT_EDITMSG call feedkeys('ggi', 't')

  " markdown files
  autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown setfiletype markdown
  autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown set spell spelllang=en_us
  autocmd FileType markdown setlocal tw=100

  " non ruby files related to Ruby
  autocmd BufNewFile,BufRead Gemfile,Gemfile.lock,Guardfile setfiletype ruby
  autocmd BufNewFile,BufRead Thorfile,config.ru,Vagrantfile setfiletype ruby
  autocmd BufNewFile,BufRead Berksfile,Berksfile.lock setfiletype ruby
  autocmd BufNewFile,BufRead Rakefile setfiletype rake
  autocmd BufNewFile,BufRead Rakefile set syntax=ruby
  autocmd BufNewFile,BufRead *.rake setfiletype rake
  autocmd BufNEwFile,BufRead *.rake set syntax=ruby

  " Chef uses Ruby, and this will enable the Chef snippets
  autocmd FileType ruby,eruby set filetype=ruby.eruby.chef

  " Python files
  let NERDTreeIgnore = ['\.pyc$', '\~$', '\.rbc$']
  autocmd BufNewFile,BufRead *.py set ts=2 sts=2 sw=2 expandtab

  " Ensure syntax highlighting for diffs
  autocmd FileType diff syntax enable

endif

" }}}
" Snippets {{{
nnoremap ,pkg :-1read $HOME/.vim/snippets/chef/package.rb<CR>/__.*__<CR>
nnoremap ,cbf :-1read $HOME/.vim/snippets/chef/cookbook_file.rb<CR>/__.*__<CR>
nnoremap ,tpl :-1read $HOME/.vim/snippets/chef/template.rb<CR>/__.*__<CR>
nnoremap ,pass :-1read $HOME/.vim/snippets/password/pass.txt<CR>/__.*__<CR>

" }}}
" NetRW {{{
let g:netrw_liststyle=3
let g:netrw_banner=0
let g:netrw_browse_split=4
let g:netrw_altv=1
let g:netrw_winsize=25
" augroup ProjectDrawer
"     autocmd!
"     autocmd VimEnter * :Vexplore
" augroup END
"
" }}}
" Vimscript {{{
" Syntax toggle {{{
function! ToggleSyntax()
  if exists("g:syntax_on")
    syntax off
  else
    syntax enable
  endif
endfunction

nmap <silent><leader>s :call ToggleSyntax()<cr>
" }}}
" }}}
" finis {{{

" }}}
